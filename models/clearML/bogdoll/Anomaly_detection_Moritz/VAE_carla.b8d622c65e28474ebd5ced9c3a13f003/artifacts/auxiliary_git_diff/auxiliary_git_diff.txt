diff --git a/.ipynb_checkpoints/VAE_Carla-Copy1-checkpoint.ipynb b/.ipynb_checkpoints/VAE_Carla-Copy1-checkpoint.ipynb
index 4a9eacd..8725132 100644
--- a/.ipynb_checkpoints/VAE_Carla-Copy1-checkpoint.ipynb
+++ b/.ipynb_checkpoints/VAE_Carla-Copy1-checkpoint.ipynb
@@ -109,7 +109,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f05428b5250>"
+       "<matplotlib.image.AxesImage at 0x7f23cd8610a0>"
       ]
      },
      "execution_count": 5,
@@ -176,7 +176,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f053efad550>"
+       "<matplotlib.image.AxesImage at 0x7f23c9f544c0>"
       ]
      },
      "execution_count": 7,
@@ -238,31 +238,33 @@
     "    def __init__(self, imgChannels=3, imgSize=imgSize, zDim=zDim):\n",
     "        super(VAE, self).__init__()\n",
     "        \n",
-    "        stride=2\n",
+    "        stride=[1,2,2,2,2,2,2]\n",
+    "        out_stride=[2,2,2,2,2,2,2]\n",
     "#         in_stride=[1,2,2,2,2]\n",
     "#         out_stride=[1,2,2,2,1]\n",
-    "        in_padding=[0,0,0,0,0,0,0]\n",
-    "        out_padding=[0,0,0,0,0,0,1]\n",
-    "        kernel=3\n",
+    "        in_padding=[1,0,0,0,0,0,0]\n",
+    "        in_trans_padding=[0,0,0,0,0,1,0]\n",
+    "        out_padding=[0,0,0,0,0,1,0]\n",
+    "        kernel=[3,3,3,3,3,3,3]\n",
     "#         layers=[128, 128, 128, 256, 256]\n",
     "        layers=[32, 32, 32, 32, 32, 32, 32]\n",
     "#         layers=[32, 64, 64, 128, 128]\n",
     "#         layers=[64, 128, 128, 128, 256]\n",
     "\n",
     "        # Initializing the 2 convolutional layers and 2 full-connected layers for the encoder\n",
-    "        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel, stride=stride, padding=in_padding[0])\n",
+    "        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel[0], stride=stride[0], padding=in_padding[0])\n",
     "        self.encBn1 = nn.BatchNorm2d(layers[0])\n",
-    "        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel, stride=stride, padding=in_padding[1])\n",
+    "        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel[1], stride=stride[1], padding=in_padding[1])\n",
     "        self.encBn2 = nn.BatchNorm2d(layers[1])\n",
-    "        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel, stride=stride, padding=in_padding[2])\n",
+    "        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel[2], stride=stride[2], padding=in_padding[2])\n",
     "        self.encBn3 = nn.BatchNorm2d(layers[2])\n",
-    "        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel, stride=stride, padding=in_padding[3])\n",
+    "        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel[3], stride=stride[3], padding=in_padding[3])\n",
     "        self.encBn4 = nn.BatchNorm2d(layers[3])\n",
-    "        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel, stride=stride, padding=in_padding[4])\n",
+    "        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel[4], stride=stride[4], padding=in_padding[4])\n",
     "        self.encBn5 = nn.BatchNorm2d(layers[4])\n",
-    "        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel, stride=stride, padding=in_padding[5])\n",
+    "        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel[5], stride=stride[5], padding=in_padding[5])\n",
     "        self.encBn6 = nn.BatchNorm2d(layers[5])\n",
-    "        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel, stride=stride, padding=in_padding[6])\n",
+    "        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel[6], stride=stride[6], padding=in_padding[6])\n",
     "        self.encBn7 = nn.BatchNorm2d(layers[6])\n",
     "        \n",
     "        encoderDims = self.calcEncoderDims(len(layers), imgSize, kernel, in_padding, stride)\n",
@@ -273,37 +275,38 @@
     "        # Initializing the fully-connected layer and 2 convolutional layers for decoder\n",
     "        self.decFC1 = nn.Linear(zDim, featureDim)\n",
     "        self.decBn1 = nn.BatchNorm1d(featureDim)\n",
-    "        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel, stride=stride, output_padding=out_padding[0])\n",
+    "        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel[6], stride=stride[6], padding=in_trans_padding[0], output_padding=out_padding[0])\n",
     "        self.decBn2 = nn.BatchNorm2d(layers[5])\n",
-    "        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel, stride=stride, output_padding=out_padding[1])\n",
+    "        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel[5], stride=stride[5], padding=in_trans_padding[1], output_padding=out_padding[1])\n",
     "        self.decBn3 = nn.BatchNorm2d(layers[4])\n",
-    "        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel, stride=stride, output_padding=out_padding[2])\n",
+    "        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel[4], stride=stride[4], padding=in_trans_padding[2], output_padding=out_padding[2])\n",
     "        self.decBn4 = nn.BatchNorm2d(layers[3])\n",
-    "        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel, stride=stride, output_padding=out_padding[3])\n",
+    "        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel[3], stride=stride[3], padding=in_trans_padding[3], output_padding=out_padding[3])\n",
     "        self.decBn5 = nn.BatchNorm2d(layers[2])\n",
-    "        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel, stride=stride, output_padding=out_padding[4])\n",
+    "        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel[2], stride=stride[2], padding=in_trans_padding[4], output_padding=out_padding[4])\n",
     "        self.decBn6 = nn.BatchNorm2d(layers[1])\n",
-    "        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel, stride=stride, output_padding=out_padding[5])\n",
+    "        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel[1], stride=stride[1], padding=in_trans_padding[5], output_padding=out_padding[5])\n",
     "        self.decBn7 = nn.BatchNorm2d(layers[0])\n",
-    "        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel, stride=stride, output_padding=out_padding[6])\n",
+    "        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel[0], stride=stride[0], padding=in_trans_padding[6], output_padding=out_padding[6])\n",
     "        \n",
     "        self.final_encoder_dim = None\n",
     "        \n",
-    "        decoderDims = self.calcDecoderDims(len(layers), encoderDims[-1], kernel, in_padding, out_padding, stride)\n",
+    "        decoderDims = self.calcDecoderDims(len(layers), encoderDims[-1], kernel, in_trans_padding, out_padding, stride)\n",
     "        self.printModel(layers, encoderDims, decoderDims, imgSize, imgChannels)\n",
     "\n",
     "    def calcEncoderDims(self, layer_size, imageSize, kernel, in_padding, stride):\n",
     "        newDims = [imageSize]\n",
     "        for x in range(layer_size):\n",
-    "            tmpSize = int((newDims[-1]-kernel+2*in_padding[x])/stride)+1\n",
+    "#             tmpSize = int((newDims[-1]-kernel[x]+2*in_padding[x])/stride[x])+1\n",
+    "            tmpSize = int(((newDims[-1] + 2*in_padding[x]-(kernel[x]-1)-1)/stride[x])+1)\n",
     "            newDims.append(tmpSize)\n",
     "        newDims.pop(0)\n",
     "        return newDims\n",
     "    \n",
-    "    def calcDecoderDims(self, layer_size, imageSize, kernel, in_padding, out_padding, stride, d=1):\n",
+    "    def calcDecoderDims(self, layer_size, imageSize, kernel, in_trans_padding, out_padding, stride, d=1):\n",
     "        newDims = [imageSize]\n",
-    "        for x in range(layer_size):\n",
-    "            tmpSize = (newDims[-1] - 1)*stride - 2*in_padding[x] + d*(kernel - 1) + out_padding[x] + 1\n",
+    "        for x in range(layer_size):            \n",
+    "            tmpSize = (newDims[-1] - 1)*stride[layer_size-1-x] - 2*in_trans_padding[x] + d*(kernel[x] - 1) + out_padding[x] + 1\n",
     "            newDims.append(tmpSize)\n",
     "#         newDims.pop(0)\n",
     "        return newDims\n",
@@ -342,7 +345,6 @@
     "        x = self.encBn6(x)\n",
     "        x = F.relu(self.encConv7(x))\n",
     "        x = self.encBn7(x)\n",
-    "#         print(x.size())\n",
     "        self.final_encoder_dim = np.array([x.size(1), x.size(2), x.size(3)])\n",
     "        flatten = np.prod(self.final_encoder_dim)\n",
     "\n",
@@ -362,22 +364,23 @@
     "\n",
     "        # z is fed back into a fully-connected layers and then into two transpose convolutional layers\n",
     "        # The generated output is the same size of the original input\n",
-    "        x = F.relu(self.decFC1(z))\n",
+    "        x = F.leaky_relu(self.decFC1(z))\n",
     "        x = self.decBn1(x)\n",
     "        x = x.view(-1, self.final_encoder_dim[0], self.final_encoder_dim[1], self.final_encoder_dim[2])\n",
-    "        x = F.relu(self.decConv1(x))\n",
+    "        x = F.leaky_relu(self.decConv1(x))\n",
     "        x = self.decBn2(x)\n",
-    "        x = F.relu(self.decConv2(x))\n",
+    "        x = F.leaky_relu(self.decConv2(x))\n",
     "        x = self.decBn3(x)\n",
-    "        x = F.relu(self.decConv3(x))\n",
+    "        x = F.leaky_relu(self.decConv3(x))\n",
     "        x = self.decBn4(x)\n",
-    "        x = F.relu(self.decConv4(x))\n",
+    "        x = F.leaky_relu(self.decConv4(x))\n",
     "        x = self.decBn5(x)\n",
-    "        x = F.relu(self.decConv5(x))\n",
+    "        x = F.leaky_relu(self.decConv5(x))\n",
     "        x = self.decBn6(x)\n",
-    "        x = F.relu(self.decConv6(x))\n",
+    "        x = F.leaky_relu(self.decConv6(x))\n",
     "        x = self.decBn7(x)\n",
     "        x = torch.sigmoid(self.decConv7(x))\n",
+    "#         print(x.size())\n",
     "        return x\n",
     "\n",
     "    def forward(self, x):\n",
@@ -433,15 +436,31 @@
    "metadata": {},
    "outputs": [
     {
-     "ename": "IndexError",
-     "evalue": "list index out of range",
-     "output_type": "error",
-     "traceback": [
-      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
-      "Input \u001b[0;32mIn [12]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mVAE\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      2\u001b[0m model\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m      3\u001b[0m optimizer \u001b[38;5;241m=\u001b[39m optim\u001b[38;5;241m.\u001b[39mAdam(model\u001b[38;5;241m.\u001b[39mparameters(), lr \u001b[38;5;241m=\u001b[39m learning_rate)\n",
-      "Input \u001b[0;32mIn [9]\u001b[0m, in \u001b[0;36mVAE.__init__\u001b[0;34m(self, imgChannels, imgSize, zDim)\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mencConv5 \u001b[38;5;241m=\u001b[39m nn\u001b[38;5;241m.\u001b[39mConv2d(in_channels\u001b[38;5;241m=\u001b[39mlayers[\u001b[38;5;241m3\u001b[39m], out_channels\u001b[38;5;241m=\u001b[39mlayers[\u001b[38;5;241m4\u001b[39m], kernel_size\u001b[38;5;241m=\u001b[39mkernel, stride\u001b[38;5;241m=\u001b[39mstride, padding\u001b[38;5;241m=\u001b[39min_padding[\u001b[38;5;241m4\u001b[39m])\n\u001b[1;32m     27\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mencBn5 \u001b[38;5;241m=\u001b[39m nn\u001b[38;5;241m.\u001b[39mBatchNorm2d(layers[\u001b[38;5;241m4\u001b[39m])\n\u001b[0;32m---> 28\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mencConv6 \u001b[38;5;241m=\u001b[39m nn\u001b[38;5;241m.\u001b[39mConv2d(in_channels\u001b[38;5;241m=\u001b[39mlayers[\u001b[38;5;241m4\u001b[39m], out_channels\u001b[38;5;241m=\u001b[39mlayers[\u001b[38;5;241m5\u001b[39m], kernel_size\u001b[38;5;241m=\u001b[39mkernel, stride\u001b[38;5;241m=\u001b[39mstride, padding\u001b[38;5;241m=\u001b[39m\u001b[43min_padding\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m5\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[1;32m     29\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mencBn6 \u001b[38;5;241m=\u001b[39m nn\u001b[38;5;241m.\u001b[39mBatchNorm2d(layers[\u001b[38;5;241m5\u001b[39m])\n\u001b[1;32m     30\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mencConv7 \u001b[38;5;241m=\u001b[39m nn\u001b[38;5;241m.\u001b[39mConv2d(in_channels\u001b[38;5;241m=\u001b[39mlayers[\u001b[38;5;241m5\u001b[39m], out_channels\u001b[38;5;241m=\u001b[39mlayers[\u001b[38;5;241m6\u001b[39m], kernel_size\u001b[38;5;241m=\u001b[39mkernel, stride\u001b[38;5;241m=\u001b[39mstride, padding\u001b[38;5;241m=\u001b[39min_padding[\u001b[38;5;241m6\u001b[39m])\n",
-      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "=============\n",
+      "Image Flow:\n",
+      "Encoder:\n",
+      "512x512x3 (Input Image)\n",
+      "512x512x32\n",
+      "255x255x32\n",
+      "127x127x32\n",
+      "63x63x32\n",
+      "31x31x32\n",
+      "15x15x32\n",
+      "7x7x32\n",
+      "Decoder:\n",
+      "7x7x32\n",
+      "15x15x32\n",
+      "31x31x32\n",
+      "63x63x32\n",
+      "127x127x32\n",
+      "255x255x32\n",
+      "510x510x32\n",
+      "512x512x3 (Output Image)\n",
+      "=============\n",
+      "Trainable params: 1323011\n"
      ]
     }
    ],
@@ -456,10 +475,40 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 13,
    "id": "dae098f1",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "cuda\n"
+     ]
+    },
+    {
+     "data": {
+      "text/plain": [
+       "<matplotlib.image.AxesImage at 0x7f23c967d370>"
+      ]
+     },
+     "execution_count": 13,
+     "metadata": {},
+     "output_type": "execute_result"
+    },
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {
+      "needs_background": "light"
+     },
+     "output_type": "display_data"
+    }
+   ],
    "source": [
     "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
     "print(device)\n",
@@ -488,7 +537,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 14,
    "id": "d061bf46",
    "metadata": {},
    "outputs": [],
@@ -510,22 +559,6537 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 15,
    "id": "055778db",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "40"
+      ]
+     },
+     "execution_count": 15,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "len(dataloaders[\"train\"].dataset)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 16,
    "id": "a07d0e77",
    "metadata": {
     "scrolled": true
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Training started!\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 1 | Loss: 118690282291.2 | V_Loss: 117997316096.0 | MAE: 117997316096.0\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 2 | Loss: 117264553984.0 | V_Loss: 116550739148.8 | MAE: 116550739148.8\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 3 | Loss: 115756587008.0 | V_Loss: 115183201484.8 | MAE: 115183201484.8\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 4 | Loss: 114400360448.0 | V_Loss: 113682058444.8 | MAE: 113682058444.8\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 5 | Loss: 112783884697.6 | V_Loss: 112048681369.6 | MAE: 112048681369.6\n",
+      "Changed learningrate\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 6 | Loss: 111821780582.4 | V_Loss: 111755099750.4 | MAE: 111755099750.4\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 7 | Loss: 111796343603.2 | V_Loss: 111639076044.8 | MAE: 111639076044.8\n",
+      "Changed learningrate\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 8 | Loss: 111402678272.0 | V_Loss: 111488590643.2 | MAE: 111488590643.2\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 9 | Loss: 111487350784.0 | V_Loss: 111323826176.0 | MAE: 111323826176.0\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 10 | Loss: 111128082432.0 | V_Loss: 111348905164.8 | MAE: 111348905164.8\n"
+     ]
+    }
+   ],
    "source": [
     "train_losses = []\n",
     "val_losses = []\n",
@@ -570,7 +7134,26 @@
     "    train_loss /= len(dataloaders[\"train\"].dataset)\n",
     "    val_loss /= len(dataloaders[\"test\"].dataset)\n",
     "\n",
-    "    print(f\"Epoch {e} | Loss: {train_loss} | V_Loss: {val_loss} | MAE: {val_loss}\")\n"
+    "    print(f\"Epoch {e} | Loss: {train_loss} | V_Loss: {val_loss} | MAE: {val_loss}\")\n",
+    "    \n",
+    "# Encoder:\n",
+    "# 512x512x3 (Input Image)\n",
+    "# 512x512x32\n",
+    "# 255x255x32\n",
+    "# 127x127x32\n",
+    "# 63x63x32\n",
+    "# 31x31x32\n",
+    "# 15x15x32\n",
+    "# 7x7x32\n",
+    "# Decoder:\n",
+    "# 7x7x32\n",
+    "# 9x9x32\n",
+    "# 19x19x32\n",
+    "# 39x39x32\n",
+    "# 79x79x32\n",
+    "# 159x159x32\n",
+    "# 319x319x32\n",
+    "# 639x639x3 (Output Image)\n"
    ]
   },
   {
@@ -583,22 +7166,78 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 17,
    "id": "cb3976cf",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "VAE(\n",
+       "  (encConv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
+       "  (encBn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv4): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv5): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv6): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv7): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encFC1): Linear(in_features=1568, out_features=256, bias=True)\n",
+       "  (encFC2): Linear(in_features=1568, out_features=256, bias=True)\n",
+       "  (decFC1): Linear(in_features=256, out_features=1568, bias=True)\n",
+       "  (decBn1): BatchNorm1d(1568, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv1): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv2): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv3): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv4): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv5): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv6): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))\n",
+       "  (decBn7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv7): ConvTranspose2d(32, 3, kernel_size=(3, 3), stride=(1, 1))\n",
+       ")"
+      ]
+     },
+     "execution_count": 17,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "model.eval()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 18,
    "id": "fe9514ab",
    "metadata": {
     "scrolled": true
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "ename": "UnboundLocalError",
+     "evalue": "local variable 'img' referenced before assignment",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mUnboundLocalError\u001b[0m                         Traceback (most recent call last)",
+      "Input \u001b[0;32mIn [18]\u001b[0m, in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m time_elapsed \u001b[38;5;241m=\u001b[39m ((end_time \u001b[38;5;241m-\u001b[39m start_time) \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m60.0\u001b[39m) \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m60.0\u001b[39m\n\u001b[1;32m      3\u001b[0m time_elapsed \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mint\u001b[39m(time_elapsed \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m100000\u001b[39m)\u001b[38;5;241m/\u001b[39m \u001b[38;5;241m100000.0\u001b[39m\n\u001b[0;32m----> 5\u001b[0m avg_mse \u001b[38;5;241m=\u001b[39m \u001b[43mevalOnSet\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtest_data\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28mprint\u001b[39m(avg_mse)\n\u001b[1;32m      8\u001b[0m file \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(PATH \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msummary.txt\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mw\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
+      "Input \u001b[0;32mIn [14]\u001b[0m, in \u001b[0;36mevalOnSet\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      2\u001b[0m avg_MSE \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m data:\n\u001b[0;32m----> 4\u001b[0m     true_img \u001b[38;5;241m=\u001b[39m \u001b[43mimg\u001b[49m\u001b[38;5;241m.\u001b[39mnumpy()\n\u001b[1;32m      5\u001b[0m     img \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([true_img])\n\u001b[1;32m      6\u001b[0m     img \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mas_tensor(img)\n",
+      "\u001b[0;31mUnboundLocalError\u001b[0m: local variable 'img' referenced before assignment"
+     ]
+    }
+   ],
    "source": [
     "end_time = time.time()\n",
     "time_elapsed = ((end_time - start_time) / 60.0) / 60.0\n",
diff --git a/.ipynb_checkpoints/VAE_Carla-checkpoint.ipynb b/.ipynb_checkpoints/VAE_Carla-checkpoint.ipynb
index 9913747..8e10ebc 100644
--- a/.ipynb_checkpoints/VAE_Carla-checkpoint.ipynb
+++ b/.ipynb_checkpoints/VAE_Carla-checkpoint.ipynb
@@ -206,31 +206,33 @@
     "    def __init__(self, imgChannels=3, imgSize=parameters[\"imgSize\"], zDim=parameters[\"zDim\"]):\n",
     "        super(VAE, self).__init__()\n",
     "        \n",
-    "        stride=2\n",
+    "        stride=[1,2,2,2,2,2,2]\n",
+    "        out_stride=[2,2,2,2,2,2,2]\n",
     "#         in_stride=[1,2,2,2,2]\n",
     "#         out_stride=[1,2,2,2,1]\n",
-    "        in_padding=[0,0,0,0,0,0,0]\n",
-    "        out_padding=[0,0,0,0,0,0,1]\n",
-    "        kernel=3\n",
+    "        in_padding=[1,0,0,0,0,0,0]\n",
+    "        in_trans_padding=[0,0,0,0,0,1,0]\n",
+    "        out_padding=[0,0,0,0,0,1,0]\n",
+    "        kernel=[3,3,3,3,3,3,3]\n",
     "#         layers=[128, 128, 128, 256, 256]\n",
     "        layers=parameters[\"layers\"]\n",
     "#         layers=[32, 64, 64, 128, 128]\n",
     "#         layers=[64, 128, 128, 128, 256]\n",
     "\n",
     "        # Initializing the 2 convolutional layers and 2 full-connected layers for the encoder\n",
-    "        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel, stride=stride, padding=in_padding[0])\n",
+    "        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel[0], stride=stride[0], padding=in_padding[0])\n",
     "        self.encBn1 = nn.BatchNorm2d(layers[0])\n",
-    "        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel, stride=stride, padding=in_padding[1])\n",
+    "        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel[1], stride=stride[1], padding=in_padding[1])\n",
     "        self.encBn2 = nn.BatchNorm2d(layers[1])\n",
-    "        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel, stride=stride, padding=in_padding[2])\n",
+    "        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel[2], stride=stride[2], padding=in_padding[2])\n",
     "        self.encBn3 = nn.BatchNorm2d(layers[2])\n",
-    "        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel, stride=stride, padding=in_padding[3])\n",
+    "        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel[3], stride=stride[3], padding=in_padding[3])\n",
     "        self.encBn4 = nn.BatchNorm2d(layers[3])\n",
-    "        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel, stride=stride, padding=in_padding[3])\n",
+    "        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel[4], stride=stride[4], padding=in_padding[4])\n",
     "        self.encBn5 = nn.BatchNorm2d(layers[4])\n",
-    "        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel, stride=stride, padding=in_padding[5])\n",
+    "        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel[5], stride=stride[5], padding=in_padding[5])\n",
     "        self.encBn6 = nn.BatchNorm2d(layers[5])\n",
-    "        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel, stride=stride, padding=in_padding[6])\n",
+    "        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel[6], stride=stride[6], padding=in_padding[6])\n",
     "        self.encBn7 = nn.BatchNorm2d(layers[6])\n",
     "        \n",
     "        encoderDims = self.calcEncoderDims(len(layers), imgSize, kernel, in_padding, stride)\n",
@@ -241,19 +243,19 @@
     "        # Initializing the fully-connected layer and 2 convolutional layers for decoder\n",
     "        self.decFC1 = nn.Linear(zDim, featureDim)\n",
     "        self.decBn1 = nn.BatchNorm1d(featureDim)\n",
-    "        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel, stride=stride, output_padding=out_padding[0])\n",
+    "        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel[6], stride=stride[6], padding=in_trans_padding[0], output_padding=out_padding[0])\n",
     "        self.decBn2 = nn.BatchNorm2d(layers[5])\n",
-    "        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel, stride=stride, output_padding=out_padding[1])\n",
+    "        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel[5], stride=stride[5], padding=in_trans_padding[1], output_padding=out_padding[1])\n",
     "        self.decBn3 = nn.BatchNorm2d(layers[4])\n",
-    "        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel, stride=stride, output_padding=out_padding[2])\n",
+    "        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel[4], stride=stride[4], padding=in_trans_padding[2], output_padding=out_padding[2])\n",
     "        self.decBn4 = nn.BatchNorm2d(layers[3])\n",
-    "        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel, stride=stride, output_padding=out_padding[3])\n",
+    "        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel[3], stride=stride[3], padding=in_trans_padding[3], output_padding=out_padding[3])\n",
     "        self.decBn5 = nn.BatchNorm2d(layers[2])\n",
-    "        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel, stride=stride, output_padding=out_padding[4])\n",
+    "        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel[2], stride=stride[2], padding=in_trans_padding[4], output_padding=out_padding[4])\n",
     "        self.decBn6 = nn.BatchNorm2d(layers[1])\n",
-    "        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel, stride=stride, output_padding=out_padding[5])\n",
+    "        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel[1], stride=stride[1], padding=in_trans_padding[5], output_padding=out_padding[5])\n",
     "        self.decBn7 = nn.BatchNorm2d(layers[0])\n",
-    "        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel, stride=stride, output_padding=out_padding[6])\n",
+    "        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel[0], stride=stride[0], padding=in_trans_padding[6], output_padding=out_padding[6])\n",
     "        \n",
     "        self.final_encoder_dim = None\n",
     "        \n",
@@ -263,7 +265,7 @@
     "    def calcEncoderDims(self, layer_size, imageSize, kernel, in_padding, stride):\n",
     "        newDims = [imageSize]\n",
     "        for x in range(layer_size):\n",
-    "            tmpSize = int((newDims[-1]-kernel+2*in_padding[x])/stride)+1\n",
+    "            tmpSize = int((newDims[-1]-kernel[x]+2*in_padding[x])/stride[x])+1\n",
     "            newDims.append(tmpSize)\n",
     "        newDims.pop(0)\n",
     "        return newDims\n",
@@ -271,7 +273,7 @@
     "    def calcDecoderDims(self, layer_size, imageSize, kernel, in_padding, out_padding, stride, d=1):\n",
     "        newDims = [imageSize]\n",
     "        for x in range(layer_size):\n",
-    "            tmpSize = (newDims[-1] - 1)*stride - 2*in_padding[x] + d*(kernel - 1) + out_padding[x] + 1\n",
+    "            tmpSize = (newDims[-1] - 1)*stride[x] - 2*in_padding[x] + d*(kernel[x] - 1) + out_padding[x] + 1\n",
     "            newDims.append(tmpSize)\n",
     "#         newDims.pop(0)\n",
     "        return newDims\n",
@@ -296,19 +298,19 @@
     "        \n",
     "    def encoder(self, x):\n",
     "\n",
-    "        x = F.relu(self.encConv1(x))\n",
+    "        x = F.leaky_relu(self.encConv1(x))\n",
     "        x = self.encBn1(x)\n",
-    "        x = F.relu(self.encConv2(x))\n",
+    "        x = F.leaky_relu(self.encConv2(x))\n",
     "        x = self.encBn2(x)\n",
-    "        x = F.relu(self.encConv3(x))\n",
+    "        x = F.leaky_relu(self.encConv3(x))\n",
     "        x = self.encBn3(x)\n",
-    "        x = F.relu(self.encConv4(x))\n",
+    "        x = F.leaky_relu(self.encConv4(x))\n",
     "        x = self.encBn4(x)\n",
-    "        x = F.relu(self.encConv5(x))\n",
+    "        x = F.leaky_relu(self.encConv5(x))\n",
     "        x = self.encBn5(x)\n",
-    "        x = F.relu(self.encConv6(x))\n",
+    "        x = F.leaky_relu(self.encConv6(x))\n",
     "        x = self.encBn6(x)\n",
-    "        x = F.relu(self.encConv7(x))\n",
+    "        x = F.leaky_relu(self.encConv7(x))\n",
     "        x = self.encBn7(x)\n",
     "        self.final_encoder_dim = np.array([x.size(1), x.size(2), x.size(3)])\n",
     "        flatten = np.prod(self.final_encoder_dim)\n",
@@ -327,20 +329,20 @@
     "\n",
     "    def decoder(self, z):\n",
     "\n",
-    "        x = F.relu(self.decFC1(z))\n",
+    "        x = F.leaky_relu(self.decFC1(z))\n",
     "        x = self.decBn1(x)\n",
     "        x = x.view(-1, self.final_encoder_dim[0], self.final_encoder_dim[1], self.final_encoder_dim[2])\n",
-    "        x = F.relu(self.decConv1(x))\n",
+    "        x = F.leaky_relu(self.decConv1(x))\n",
     "        x = self.decBn2(x)\n",
-    "        x = F.relu(self.decConv2(x))\n",
+    "        x = F.leaky_relu(self.decConv2(x))\n",
     "        x = self.decBn3(x)\n",
-    "        x = F.relu(self.decConv3(x))\n",
+    "        x = F.leaky_relu(self.decConv3(x))\n",
     "        x = self.decBn4(x)\n",
-    "        x = F.relu(self.decConv4(x))\n",
+    "        x = F.leaky_relu(self.decConv4(x))\n",
     "        x = self.decBn5(x)\n",
-    "        x = F.relu(self.decConv5(x))\n",
+    "        x = F.leaky_relu(self.decConv5(x))\n",
     "        x = self.decBn6(x)\n",
-    "        x = F.relu(self.decConv6(x))\n",
+    "        x = F.leaky_relu(self.decConv6(x))\n",
     "        x = self.decBn7(x)\n",
     "        x = torch.sigmoid(self.decConv7(x))\n",
     "        return x\n",
diff --git a/VAE_Carla-Copy1.ipynb b/VAE_Carla-Copy1.ipynb
index 9adecdd..8725132 100644
--- a/VAE_Carla-Copy1.ipynb
+++ b/VAE_Carla-Copy1.ipynb
@@ -109,7 +109,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f05428b5250>"
+       "<matplotlib.image.AxesImage at 0x7f23cd8610a0>"
       ]
      },
      "execution_count": 5,
@@ -176,7 +176,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f053efad550>"
+       "<matplotlib.image.AxesImage at 0x7f23c9f544c0>"
       ]
      },
      "execution_count": 7,
@@ -227,7 +227,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 9,
    "id": "a98d72d7",
    "metadata": {},
    "outputs": [],
@@ -238,31 +238,33 @@
     "    def __init__(self, imgChannels=3, imgSize=imgSize, zDim=zDim):\n",
     "        super(VAE, self).__init__()\n",
     "        \n",
-    "        stride=2\n",
+    "        stride=[1,2,2,2,2,2,2]\n",
+    "        out_stride=[2,2,2,2,2,2,2]\n",
     "#         in_stride=[1,2,2,2,2]\n",
     "#         out_stride=[1,2,2,2,1]\n",
-    "        in_padding=[0,0,0,0,0,0,0]\n",
-    "        out_padding=[0,0,0,0,0,0,1]\n",
-    "        kernel=3\n",
+    "        in_padding=[1,0,0,0,0,0,0]\n",
+    "        in_trans_padding=[0,0,0,0,0,1,0]\n",
+    "        out_padding=[0,0,0,0,0,1,0]\n",
+    "        kernel=[3,3,3,3,3,3,3]\n",
     "#         layers=[128, 128, 128, 256, 256]\n",
     "        layers=[32, 32, 32, 32, 32, 32, 32]\n",
     "#         layers=[32, 64, 64, 128, 128]\n",
     "#         layers=[64, 128, 128, 128, 256]\n",
     "\n",
     "        # Initializing the 2 convolutional layers and 2 full-connected layers for the encoder\n",
-    "        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel, stride=stride, padding=in_padding[0])\n",
+    "        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel[0], stride=stride[0], padding=in_padding[0])\n",
     "        self.encBn1 = nn.BatchNorm2d(layers[0])\n",
-    "        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel, stride=stride, padding=in_padding[1])\n",
+    "        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel[1], stride=stride[1], padding=in_padding[1])\n",
     "        self.encBn2 = nn.BatchNorm2d(layers[1])\n",
-    "        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel, stride=stride, padding=in_padding[2])\n",
+    "        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel[2], stride=stride[2], padding=in_padding[2])\n",
     "        self.encBn3 = nn.BatchNorm2d(layers[2])\n",
-    "        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel, stride=stride, padding=in_padding[3])\n",
+    "        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel[3], stride=stride[3], padding=in_padding[3])\n",
     "        self.encBn4 = nn.BatchNorm2d(layers[3])\n",
-    "        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel, stride=stride, padding=in_padding[4])\n",
+    "        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel[4], stride=stride[4], padding=in_padding[4])\n",
     "        self.encBn5 = nn.BatchNorm2d(layers[4])\n",
-    "        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel, stride=stride, padding=in_padding[5])\n",
+    "        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel[5], stride=stride[5], padding=in_padding[5])\n",
     "        self.encBn6 = nn.BatchNorm2d(layers[5])\n",
-    "        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel, stride=stride, padding=in_padding[6])\n",
+    "        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel[6], stride=stride[6], padding=in_padding[6])\n",
     "        self.encBn7 = nn.BatchNorm2d(layers[6])\n",
     "        \n",
     "        encoderDims = self.calcEncoderDims(len(layers), imgSize, kernel, in_padding, stride)\n",
@@ -273,37 +275,38 @@
     "        # Initializing the fully-connected layer and 2 convolutional layers for decoder\n",
     "        self.decFC1 = nn.Linear(zDim, featureDim)\n",
     "        self.decBn1 = nn.BatchNorm1d(featureDim)\n",
-    "        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel, stride=stride, output_padding=out_padding[0])\n",
+    "        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel[6], stride=stride[6], padding=in_trans_padding[0], output_padding=out_padding[0])\n",
     "        self.decBn2 = nn.BatchNorm2d(layers[5])\n",
-    "        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel, stride=stride, output_padding=out_padding[1])\n",
+    "        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel[5], stride=stride[5], padding=in_trans_padding[1], output_padding=out_padding[1])\n",
     "        self.decBn3 = nn.BatchNorm2d(layers[4])\n",
-    "        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel, stride=stride, output_padding=out_padding[2])\n",
+    "        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel[4], stride=stride[4], padding=in_trans_padding[2], output_padding=out_padding[2])\n",
     "        self.decBn4 = nn.BatchNorm2d(layers[3])\n",
-    "        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel, stride=stride, output_padding=out_padding[3])\n",
+    "        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel[3], stride=stride[3], padding=in_trans_padding[3], output_padding=out_padding[3])\n",
     "        self.decBn5 = nn.BatchNorm2d(layers[2])\n",
-    "        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel, stride=stride, output_padding=out_padding[4])\n",
+    "        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel[2], stride=stride[2], padding=in_trans_padding[4], output_padding=out_padding[4])\n",
     "        self.decBn6 = nn.BatchNorm2d(layers[1])\n",
-    "        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel, stride=stride, output_padding=out_padding[5])\n",
+    "        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel[1], stride=stride[1], padding=in_trans_padding[5], output_padding=out_padding[5])\n",
     "        self.decBn7 = nn.BatchNorm2d(layers[0])\n",
-    "        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel, stride=stride, output_padding=out_padding[6])\n",
+    "        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel[0], stride=stride[0], padding=in_trans_padding[6], output_padding=out_padding[6])\n",
     "        \n",
     "        self.final_encoder_dim = None\n",
     "        \n",
-    "        decoderDims = self.calcDecoderDims(len(layers), encoderDims[-1], kernel, in_padding, out_padding, stride)\n",
+    "        decoderDims = self.calcDecoderDims(len(layers), encoderDims[-1], kernel, in_trans_padding, out_padding, stride)\n",
     "        self.printModel(layers, encoderDims, decoderDims, imgSize, imgChannels)\n",
     "\n",
     "    def calcEncoderDims(self, layer_size, imageSize, kernel, in_padding, stride):\n",
     "        newDims = [imageSize]\n",
     "        for x in range(layer_size):\n",
-    "            tmpSize = int((newDims[-1]-kernel+2*in_padding[x])/stride)+1\n",
+    "#             tmpSize = int((newDims[-1]-kernel[x]+2*in_padding[x])/stride[x])+1\n",
+    "            tmpSize = int(((newDims[-1] + 2*in_padding[x]-(kernel[x]-1)-1)/stride[x])+1)\n",
     "            newDims.append(tmpSize)\n",
     "        newDims.pop(0)\n",
     "        return newDims\n",
     "    \n",
-    "    def calcDecoderDims(self, layer_size, imageSize, kernel, in_padding, out_padding, stride, d=1):\n",
+    "    def calcDecoderDims(self, layer_size, imageSize, kernel, in_trans_padding, out_padding, stride, d=1):\n",
     "        newDims = [imageSize]\n",
-    "        for x in range(layer_size):\n",
-    "            tmpSize = (newDims[-1] - 1)*stride - 2*in_padding[x] + d*(kernel - 1) + out_padding[x] + 1\n",
+    "        for x in range(layer_size):            \n",
+    "            tmpSize = (newDims[-1] - 1)*stride[layer_size-1-x] - 2*in_trans_padding[x] + d*(kernel[x] - 1) + out_padding[x] + 1\n",
     "            newDims.append(tmpSize)\n",
     "#         newDims.pop(0)\n",
     "        return newDims\n",
@@ -342,7 +345,6 @@
     "        x = self.encBn6(x)\n",
     "        x = F.relu(self.encConv7(x))\n",
     "        x = self.encBn7(x)\n",
-    "#         print(x.size())\n",
     "        self.final_encoder_dim = np.array([x.size(1), x.size(2), x.size(3)])\n",
     "        flatten = np.prod(self.final_encoder_dim)\n",
     "\n",
@@ -362,22 +364,23 @@
     "\n",
     "        # z is fed back into a fully-connected layers and then into two transpose convolutional layers\n",
     "        # The generated output is the same size of the original input\n",
-    "        x = F.relu(self.decFC1(z))\n",
+    "        x = F.leaky_relu(self.decFC1(z))\n",
     "        x = self.decBn1(x)\n",
     "        x = x.view(-1, self.final_encoder_dim[0], self.final_encoder_dim[1], self.final_encoder_dim[2])\n",
-    "        x = F.relu(self.decConv1(x))\n",
+    "        x = F.leaky_relu(self.decConv1(x))\n",
     "        x = self.decBn2(x)\n",
-    "        x = F.relu(self.decConv2(x))\n",
+    "        x = F.leaky_relu(self.decConv2(x))\n",
     "        x = self.decBn3(x)\n",
-    "        x = F.relu(self.decConv3(x))\n",
+    "        x = F.leaky_relu(self.decConv3(x))\n",
     "        x = self.decBn4(x)\n",
-    "        x = F.relu(self.decConv4(x))\n",
+    "        x = F.leaky_relu(self.decConv4(x))\n",
     "        x = self.decBn5(x)\n",
-    "        x = F.relu(self.decConv5(x))\n",
+    "        x = F.leaky_relu(self.decConv5(x))\n",
     "        x = self.decBn6(x)\n",
-    "        x = F.relu(self.decConv6(x))\n",
+    "        x = F.leaky_relu(self.decConv6(x))\n",
     "        x = self.decBn7(x)\n",
     "        x = torch.sigmoid(self.decConv7(x))\n",
+    "#         print(x.size())\n",
     "        return x\n",
     "\n",
     "    def forward(self, x):\n",
@@ -404,7 +407,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 11,
    "id": "891e8c7e",
    "metadata": {},
    "outputs": [],
@@ -428,7 +431,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 12,
    "id": "753dd34b",
    "metadata": {},
    "outputs": [
@@ -440,24 +443,24 @@
       "Image Flow:\n",
       "Encoder:\n",
       "512x512x3 (Input Image)\n",
+      "512x512x32\n",
       "255x255x32\n",
       "127x127x32\n",
       "63x63x32\n",
       "31x31x32\n",
       "15x15x32\n",
       "7x7x32\n",
-      "3x3x32\n",
       "Decoder:\n",
-      "3x3x32\n",
       "7x7x32\n",
       "15x15x32\n",
       "31x31x32\n",
       "63x63x32\n",
       "127x127x32\n",
       "255x255x32\n",
+      "510x510x32\n",
       "512x512x3 (Output Image)\n",
       "=============\n",
-      "Trainable params: 336131\n"
+      "Trainable params: 1323011\n"
      ]
     }
    ],
@@ -472,7 +475,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 13,
    "id": "dae098f1",
    "metadata": {},
    "outputs": [
@@ -486,16 +489,16 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f053db95ac0>"
+       "<matplotlib.image.AxesImage at 0x7f23c967d370>"
       ]
      },
-     "execution_count": 16,
+     "execution_count": 13,
      "metadata": {},
      "output_type": "execute_result"
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -534,7 +537,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": 14,
    "id": "d061bf46",
    "metadata": {},
    "outputs": [],
@@ -556,7 +559,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 15,
    "id": "055778db",
    "metadata": {},
    "outputs": [
@@ -566,7 +569,7 @@
        "40"
       ]
      },
-     "execution_count": 18,
+     "execution_count": 15,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -577,7 +580,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": 16,
    "id": "a07d0e77",
    "metadata": {
     "scrolled": true
@@ -588,18 +591,6502 @@
      "output_type": "stream",
      "text": [
       "Training started!\n",
-      "Epoch 1 | Loss: 89716767129.6 | V_Loss: 89554392678.4 | MAE: 89554392678.4\n",
-      "Epoch 2 | Loss: 89321059532.8 | V_Loss: 89095223910.4 | MAE: 89095223910.4\n",
-      "Epoch 3 | Loss: 88940625715.2 | V_Loss: 88634909491.2 | MAE: 88634909491.2\n",
-      "Epoch 4 | Loss: 88332988825.6 | V_Loss: 88077173145.6 | MAE: 88077173145.6\n",
-      "Epoch 5 | Loss: 87927642931.2 | V_Loss: 87651177267.2 | MAE: 87651177267.2\n",
-      "Changed learningrate\n",
-      "Epoch 6 | Loss: 87603713843.2 | V_Loss: 87498995302.4 | MAE: 87498995302.4\n",
-      "Epoch 7 | Loss: 87579692236.8 | V_Loss: 87537661747.2 | MAE: 87537661747.2\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 1 | Loss: 118690282291.2 | V_Loss: 117997316096.0 | MAE: 117997316096.0\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 2 | Loss: 117264553984.0 | V_Loss: 116550739148.8 | MAE: 116550739148.8\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 3 | Loss: 115756587008.0 | V_Loss: 115183201484.8 | MAE: 115183201484.8\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 4 | Loss: 114400360448.0 | V_Loss: 113682058444.8 | MAE: 113682058444.8\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 5 | Loss: 112783884697.6 | V_Loss: 112048681369.6 | MAE: 112048681369.6\n",
       "Changed learningrate\n",
-      "Epoch 8 | Loss: 87542907084.8 | V_Loss: 87487111577.6 | MAE: 87487111577.6\n",
-      "Epoch 9 | Loss: 87381284864.0 | V_Loss: 87505128038.4 | MAE: 87505128038.4\n",
-      "Epoch 10 | Loss: 87454515609.6 | V_Loss: 87355100774.4 | MAE: 87355100774.4\n"
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 6 | Loss: 111821780582.4 | V_Loss: 111755099750.4 | MAE: 111755099750.4\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 7 | Loss: 111796343603.2 | V_Loss: 111639076044.8 | MAE: 111639076044.8\n",
+      "Changed learningrate\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 8 | Loss: 111402678272.0 | V_Loss: 111488590643.2 | MAE: 111488590643.2\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 9 | Loss: 111487350784.0 | V_Loss: 111323826176.0 | MAE: 111323826176.0\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "torch.Size([2, 32, 512, 512])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "----\n",
+      "torch.Size([2, 32, 7, 7])\n",
+      "torch.Size([2, 32, 15, 15])\n",
+      "torch.Size([2, 32, 31, 31])\n",
+      "torch.Size([2, 32, 63, 63])\n",
+      "torch.Size([2, 32, 127, 127])\n",
+      "torch.Size([2, 32, 255, 255])\n",
+      "torch.Size([2, 32, 510, 510])\n",
+      "torch.Size([2, 3, 512, 512])\n",
+      "Epoch 10 | Loss: 111128082432.0 | V_Loss: 111348905164.8 | MAE: 111348905164.8\n"
      ]
     }
    ],
@@ -647,7 +7134,26 @@
     "    train_loss /= len(dataloaders[\"train\"].dataset)\n",
     "    val_loss /= len(dataloaders[\"test\"].dataset)\n",
     "\n",
-    "    print(f\"Epoch {e} | Loss: {train_loss} | V_Loss: {val_loss} | MAE: {val_loss}\")\n"
+    "    print(f\"Epoch {e} | Loss: {train_loss} | V_Loss: {val_loss} | MAE: {val_loss}\")\n",
+    "    \n",
+    "# Encoder:\n",
+    "# 512x512x3 (Input Image)\n",
+    "# 512x512x32\n",
+    "# 255x255x32\n",
+    "# 127x127x32\n",
+    "# 63x63x32\n",
+    "# 31x31x32\n",
+    "# 15x15x32\n",
+    "# 7x7x32\n",
+    "# Decoder:\n",
+    "# 7x7x32\n",
+    "# 9x9x32\n",
+    "# 19x19x32\n",
+    "# 39x39x32\n",
+    "# 79x79x32\n",
+    "# 159x159x32\n",
+    "# 319x319x32\n",
+    "# 639x639x3 (Output Image)\n"
    ]
   },
   {
@@ -660,22 +7166,78 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 17,
    "id": "cb3976cf",
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "VAE(\n",
+       "  (encConv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
+       "  (encBn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv4): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv5): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv6): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encConv7): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encBn7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encFC1): Linear(in_features=1568, out_features=256, bias=True)\n",
+       "  (encFC2): Linear(in_features=1568, out_features=256, bias=True)\n",
+       "  (decFC1): Linear(in_features=256, out_features=1568, bias=True)\n",
+       "  (decBn1): BatchNorm1d(1568, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv1): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv2): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv3): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv4): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv5): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decBn6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv6): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))\n",
+       "  (decBn7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (decConv7): ConvTranspose2d(32, 3, kernel_size=(3, 3), stride=(1, 1))\n",
+       ")"
+      ]
+     },
+     "execution_count": 17,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "model.eval()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 18,
    "id": "fe9514ab",
    "metadata": {
     "scrolled": true
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "ename": "UnboundLocalError",
+     "evalue": "local variable 'img' referenced before assignment",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mUnboundLocalError\u001b[0m                         Traceback (most recent call last)",
+      "Input \u001b[0;32mIn [18]\u001b[0m, in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m time_elapsed \u001b[38;5;241m=\u001b[39m ((end_time \u001b[38;5;241m-\u001b[39m start_time) \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m60.0\u001b[39m) \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m60.0\u001b[39m\n\u001b[1;32m      3\u001b[0m time_elapsed \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mint\u001b[39m(time_elapsed \u001b[38;5;241m*\u001b[39m \u001b[38;5;241m100000\u001b[39m)\u001b[38;5;241m/\u001b[39m \u001b[38;5;241m100000.0\u001b[39m\n\u001b[0;32m----> 5\u001b[0m avg_mse \u001b[38;5;241m=\u001b[39m \u001b[43mevalOnSet\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtest_data\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28mprint\u001b[39m(avg_mse)\n\u001b[1;32m      8\u001b[0m file \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mopen\u001b[39m(PATH \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msummary.txt\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mw\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
+      "Input \u001b[0;32mIn [14]\u001b[0m, in \u001b[0;36mevalOnSet\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m      2\u001b[0m avg_MSE \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m data:\n\u001b[0;32m----> 4\u001b[0m     true_img \u001b[38;5;241m=\u001b[39m \u001b[43mimg\u001b[49m\u001b[38;5;241m.\u001b[39mnumpy()\n\u001b[1;32m      5\u001b[0m     img \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marray([true_img])\n\u001b[1;32m      6\u001b[0m     img \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mas_tensor(img)\n",
+      "\u001b[0;31mUnboundLocalError\u001b[0m: local variable 'img' referenced before assignment"
+     ]
+    }
+   ],
    "source": [
     "end_time = time.time()\n",
     "time_elapsed = ((end_time - start_time) / 60.0) / 60.0\n",
diff --git a/VAE_Carla.ipynb b/VAE_Carla.ipynb
index 9913747..8e10ebc 100644
--- a/VAE_Carla.ipynb
+++ b/VAE_Carla.ipynb
@@ -206,31 +206,33 @@
     "    def __init__(self, imgChannels=3, imgSize=parameters[\"imgSize\"], zDim=parameters[\"zDim\"]):\n",
     "        super(VAE, self).__init__()\n",
     "        \n",
-    "        stride=2\n",
+    "        stride=[1,2,2,2,2,2,2]\n",
+    "        out_stride=[2,2,2,2,2,2,2]\n",
     "#         in_stride=[1,2,2,2,2]\n",
     "#         out_stride=[1,2,2,2,1]\n",
-    "        in_padding=[0,0,0,0,0,0,0]\n",
-    "        out_padding=[0,0,0,0,0,0,1]\n",
-    "        kernel=3\n",
+    "        in_padding=[1,0,0,0,0,0,0]\n",
+    "        in_trans_padding=[0,0,0,0,0,1,0]\n",
+    "        out_padding=[0,0,0,0,0,1,0]\n",
+    "        kernel=[3,3,3,3,3,3,3]\n",
     "#         layers=[128, 128, 128, 256, 256]\n",
     "        layers=parameters[\"layers\"]\n",
     "#         layers=[32, 64, 64, 128, 128]\n",
     "#         layers=[64, 128, 128, 128, 256]\n",
     "\n",
     "        # Initializing the 2 convolutional layers and 2 full-connected layers for the encoder\n",
-    "        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel, stride=stride, padding=in_padding[0])\n",
+    "        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel[0], stride=stride[0], padding=in_padding[0])\n",
     "        self.encBn1 = nn.BatchNorm2d(layers[0])\n",
-    "        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel, stride=stride, padding=in_padding[1])\n",
+    "        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel[1], stride=stride[1], padding=in_padding[1])\n",
     "        self.encBn2 = nn.BatchNorm2d(layers[1])\n",
-    "        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel, stride=stride, padding=in_padding[2])\n",
+    "        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel[2], stride=stride[2], padding=in_padding[2])\n",
     "        self.encBn3 = nn.BatchNorm2d(layers[2])\n",
-    "        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel, stride=stride, padding=in_padding[3])\n",
+    "        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel[3], stride=stride[3], padding=in_padding[3])\n",
     "        self.encBn4 = nn.BatchNorm2d(layers[3])\n",
-    "        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel, stride=stride, padding=in_padding[3])\n",
+    "        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel[4], stride=stride[4], padding=in_padding[4])\n",
     "        self.encBn5 = nn.BatchNorm2d(layers[4])\n",
-    "        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel, stride=stride, padding=in_padding[5])\n",
+    "        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel[5], stride=stride[5], padding=in_padding[5])\n",
     "        self.encBn6 = nn.BatchNorm2d(layers[5])\n",
-    "        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel, stride=stride, padding=in_padding[6])\n",
+    "        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel[6], stride=stride[6], padding=in_padding[6])\n",
     "        self.encBn7 = nn.BatchNorm2d(layers[6])\n",
     "        \n",
     "        encoderDims = self.calcEncoderDims(len(layers), imgSize, kernel, in_padding, stride)\n",
@@ -241,19 +243,19 @@
     "        # Initializing the fully-connected layer and 2 convolutional layers for decoder\n",
     "        self.decFC1 = nn.Linear(zDim, featureDim)\n",
     "        self.decBn1 = nn.BatchNorm1d(featureDim)\n",
-    "        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel, stride=stride, output_padding=out_padding[0])\n",
+    "        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel[6], stride=stride[6], padding=in_trans_padding[0], output_padding=out_padding[0])\n",
     "        self.decBn2 = nn.BatchNorm2d(layers[5])\n",
-    "        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel, stride=stride, output_padding=out_padding[1])\n",
+    "        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel[5], stride=stride[5], padding=in_trans_padding[1], output_padding=out_padding[1])\n",
     "        self.decBn3 = nn.BatchNorm2d(layers[4])\n",
-    "        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel, stride=stride, output_padding=out_padding[2])\n",
+    "        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel[4], stride=stride[4], padding=in_trans_padding[2], output_padding=out_padding[2])\n",
     "        self.decBn4 = nn.BatchNorm2d(layers[3])\n",
-    "        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel, stride=stride, output_padding=out_padding[3])\n",
+    "        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel[3], stride=stride[3], padding=in_trans_padding[3], output_padding=out_padding[3])\n",
     "        self.decBn5 = nn.BatchNorm2d(layers[2])\n",
-    "        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel, stride=stride, output_padding=out_padding[4])\n",
+    "        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel[2], stride=stride[2], padding=in_trans_padding[4], output_padding=out_padding[4])\n",
     "        self.decBn6 = nn.BatchNorm2d(layers[1])\n",
-    "        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel, stride=stride, output_padding=out_padding[5])\n",
+    "        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel[1], stride=stride[1], padding=in_trans_padding[5], output_padding=out_padding[5])\n",
     "        self.decBn7 = nn.BatchNorm2d(layers[0])\n",
-    "        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel, stride=stride, output_padding=out_padding[6])\n",
+    "        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel[0], stride=stride[0], padding=in_trans_padding[6], output_padding=out_padding[6])\n",
     "        \n",
     "        self.final_encoder_dim = None\n",
     "        \n",
@@ -263,7 +265,7 @@
     "    def calcEncoderDims(self, layer_size, imageSize, kernel, in_padding, stride):\n",
     "        newDims = [imageSize]\n",
     "        for x in range(layer_size):\n",
-    "            tmpSize = int((newDims[-1]-kernel+2*in_padding[x])/stride)+1\n",
+    "            tmpSize = int((newDims[-1]-kernel[x]+2*in_padding[x])/stride[x])+1\n",
     "            newDims.append(tmpSize)\n",
     "        newDims.pop(0)\n",
     "        return newDims\n",
@@ -271,7 +273,7 @@
     "    def calcDecoderDims(self, layer_size, imageSize, kernel, in_padding, out_padding, stride, d=1):\n",
     "        newDims = [imageSize]\n",
     "        for x in range(layer_size):\n",
-    "            tmpSize = (newDims[-1] - 1)*stride - 2*in_padding[x] + d*(kernel - 1) + out_padding[x] + 1\n",
+    "            tmpSize = (newDims[-1] - 1)*stride[x] - 2*in_padding[x] + d*(kernel[x] - 1) + out_padding[x] + 1\n",
     "            newDims.append(tmpSize)\n",
     "#         newDims.pop(0)\n",
     "        return newDims\n",
@@ -296,19 +298,19 @@
     "        \n",
     "    def encoder(self, x):\n",
     "\n",
-    "        x = F.relu(self.encConv1(x))\n",
+    "        x = F.leaky_relu(self.encConv1(x))\n",
     "        x = self.encBn1(x)\n",
-    "        x = F.relu(self.encConv2(x))\n",
+    "        x = F.leaky_relu(self.encConv2(x))\n",
     "        x = self.encBn2(x)\n",
-    "        x = F.relu(self.encConv3(x))\n",
+    "        x = F.leaky_relu(self.encConv3(x))\n",
     "        x = self.encBn3(x)\n",
-    "        x = F.relu(self.encConv4(x))\n",
+    "        x = F.leaky_relu(self.encConv4(x))\n",
     "        x = self.encBn4(x)\n",
-    "        x = F.relu(self.encConv5(x))\n",
+    "        x = F.leaky_relu(self.encConv5(x))\n",
     "        x = self.encBn5(x)\n",
-    "        x = F.relu(self.encConv6(x))\n",
+    "        x = F.leaky_relu(self.encConv6(x))\n",
     "        x = self.encBn6(x)\n",
-    "        x = F.relu(self.encConv7(x))\n",
+    "        x = F.leaky_relu(self.encConv7(x))\n",
     "        x = self.encBn7(x)\n",
     "        self.final_encoder_dim = np.array([x.size(1), x.size(2), x.size(3)])\n",
     "        flatten = np.prod(self.final_encoder_dim)\n",
@@ -327,20 +329,20 @@
     "\n",
     "    def decoder(self, z):\n",
     "\n",
-    "        x = F.relu(self.decFC1(z))\n",
+    "        x = F.leaky_relu(self.decFC1(z))\n",
     "        x = self.decBn1(x)\n",
     "        x = x.view(-1, self.final_encoder_dim[0], self.final_encoder_dim[1], self.final_encoder_dim[2])\n",
-    "        x = F.relu(self.decConv1(x))\n",
+    "        x = F.leaky_relu(self.decConv1(x))\n",
     "        x = self.decBn2(x)\n",
-    "        x = F.relu(self.decConv2(x))\n",
+    "        x = F.leaky_relu(self.decConv2(x))\n",
     "        x = self.decBn3(x)\n",
-    "        x = F.relu(self.decConv3(x))\n",
+    "        x = F.leaky_relu(self.decConv3(x))\n",
     "        x = self.decBn4(x)\n",
-    "        x = F.relu(self.decConv4(x))\n",
+    "        x = F.leaky_relu(self.decConv4(x))\n",
     "        x = self.decBn5(x)\n",
-    "        x = F.relu(self.decConv5(x))\n",
+    "        x = F.leaky_relu(self.decConv5(x))\n",
     "        x = self.decBn6(x)\n",
-    "        x = F.relu(self.decConv6(x))\n",
+    "        x = F.leaky_relu(self.decConv6(x))\n",
     "        x = self.decBn7(x)\n",
     "        x = torch.sigmoid(self.decConv7(x))\n",
     "        return x\n",
diff --git a/VAE_Carla.py b/VAE_Carla.py
index d124d90..4ea3b90 100644
--- a/VAE_Carla.py
+++ b/VAE_Carla.py
@@ -156,31 +156,33 @@ class VAE(nn.Module):
     def __init__(self, imgChannels=3, imgSize=parameters["imgSize"], zDim=parameters["zDim"]):
         super(VAE, self).__init__()
         
-        stride=2
+        stride=[1,2,2,2,2,2,2]
+        out_stride=[2,2,2,2,2,2,2]
 #         in_stride=[1,2,2,2,2]
 #         out_stride=[1,2,2,2,1]
-        in_padding=[0,0,0,0,0,0,0]
-        out_padding=[0,0,0,0,0,0,1]
-        kernel=3
+        in_padding=[1,0,0,0,0,0,0]
+        in_trans_padding=[0,0,0,0,0,1,0]
+        out_padding=[0,0,0,0,0,1,0]
+        kernel=[3,3,3,3,3,3,3]
 #         layers=[128, 128, 128, 256, 256]
         layers=parameters["layers"]
 #         layers=[32, 64, 64, 128, 128]
 #         layers=[64, 128, 128, 128, 256]
 
         # Initializing the 2 convolutional layers and 2 full-connected layers for the encoder
-        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel, stride=stride, padding=in_padding[0])
+        self.encConv1 = nn.Conv2d(in_channels=imgChannels, out_channels=layers[0], kernel_size=kernel[0], stride=stride[0], padding=in_padding[0])
         self.encBn1 = nn.BatchNorm2d(layers[0])
-        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel, stride=stride, padding=in_padding[1])
+        self.encConv2 = nn.Conv2d(in_channels=layers[0], out_channels=layers[1], kernel_size=kernel[1], stride=stride[1], padding=in_padding[1])
         self.encBn2 = nn.BatchNorm2d(layers[1])
-        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel, stride=stride, padding=in_padding[2])
+        self.encConv3 = nn.Conv2d(in_channels=layers[1], out_channels=layers[2], kernel_size=kernel[2], stride=stride[2], padding=in_padding[2])
         self.encBn3 = nn.BatchNorm2d(layers[2])
-        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel, stride=stride, padding=in_padding[3])
+        self.encConv4 = nn.Conv2d(in_channels=layers[2], out_channels=layers[3], kernel_size=kernel[3], stride=stride[3], padding=in_padding[3])
         self.encBn4 = nn.BatchNorm2d(layers[3])
-        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel, stride=stride, padding=in_padding[3])
+        self.encConv5 = nn.Conv2d(in_channels=layers[3], out_channels=layers[4], kernel_size=kernel[4], stride=stride[4], padding=in_padding[4])
         self.encBn5 = nn.BatchNorm2d(layers[4])
-        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel, stride=stride, padding=in_padding[5])
+        self.encConv6 = nn.Conv2d(in_channels=layers[4], out_channels=layers[5], kernel_size=kernel[5], stride=stride[5], padding=in_padding[5])
         self.encBn6 = nn.BatchNorm2d(layers[5])
-        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel, stride=stride, padding=in_padding[6])
+        self.encConv7 = nn.Conv2d(in_channels=layers[5], out_channels=layers[6], kernel_size=kernel[6], stride=stride[6], padding=in_padding[6])
         self.encBn7 = nn.BatchNorm2d(layers[6])
         
         encoderDims = self.calcEncoderDims(len(layers), imgSize, kernel, in_padding, stride)
@@ -191,19 +193,19 @@ class VAE(nn.Module):
         # Initializing the fully-connected layer and 2 convolutional layers for decoder
         self.decFC1 = nn.Linear(zDim, featureDim)
         self.decBn1 = nn.BatchNorm1d(featureDim)
-        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel, stride=stride, output_padding=out_padding[0])
+        self.decConv1 = nn.ConvTranspose2d(in_channels=layers[6], out_channels=layers[5], kernel_size=kernel[6], stride=stride[6], padding=in_trans_padding[0], output_padding=out_padding[0])
         self.decBn2 = nn.BatchNorm2d(layers[5])
-        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel, stride=stride, output_padding=out_padding[1])
+        self.decConv2 = nn.ConvTranspose2d(in_channels=layers[5], out_channels=layers[4], kernel_size=kernel[5], stride=stride[5], padding=in_trans_padding[1], output_padding=out_padding[1])
         self.decBn3 = nn.BatchNorm2d(layers[4])
-        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel, stride=stride, output_padding=out_padding[2])
+        self.decConv3 = nn.ConvTranspose2d(in_channels=layers[4], out_channels=layers[3], kernel_size=kernel[4], stride=stride[4], padding=in_trans_padding[2], output_padding=out_padding[2])
         self.decBn4 = nn.BatchNorm2d(layers[3])
-        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel, stride=stride, output_padding=out_padding[3])
+        self.decConv4 = nn.ConvTranspose2d(in_channels=layers[3], out_channels=layers[2], kernel_size=kernel[3], stride=stride[3], padding=in_trans_padding[3], output_padding=out_padding[3])
         self.decBn5 = nn.BatchNorm2d(layers[2])
-        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel, stride=stride, output_padding=out_padding[4])
+        self.decConv5 = nn.ConvTranspose2d(in_channels=layers[2], out_channels=layers[1], kernel_size=kernel[2], stride=stride[2], padding=in_trans_padding[4], output_padding=out_padding[4])
         self.decBn6 = nn.BatchNorm2d(layers[1])
-        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel, stride=stride, output_padding=out_padding[5])
+        self.decConv6 = nn.ConvTranspose2d(in_channels=layers[1], out_channels=layers[0], kernel_size=kernel[1], stride=stride[1], padding=in_trans_padding[5], output_padding=out_padding[5])
         self.decBn7 = nn.BatchNorm2d(layers[0])
-        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel, stride=stride, output_padding=out_padding[6])
+        self.decConv7 = nn.ConvTranspose2d(in_channels=layers[0], out_channels=imgChannels, kernel_size=kernel[0], stride=stride[0], padding=in_trans_padding[6], output_padding=out_padding[6])
         
         self.final_encoder_dim = None
         
@@ -213,7 +215,7 @@ class VAE(nn.Module):
     def calcEncoderDims(self, layer_size, imageSize, kernel, in_padding, stride):
         newDims = [imageSize]
         for x in range(layer_size):
-            tmpSize = int((newDims[-1]-kernel+2*in_padding[x])/stride)+1
+            tmpSize = int((newDims[-1]-kernel[x]+2*in_padding[x])/stride[x])+1
             newDims.append(tmpSize)
         newDims.pop(0)
         return newDims
@@ -221,7 +223,7 @@ class VAE(nn.Module):
     def calcDecoderDims(self, layer_size, imageSize, kernel, in_padding, out_padding, stride, d=1):
         newDims = [imageSize]
         for x in range(layer_size):
-            tmpSize = (newDims[-1] - 1)*stride - 2*in_padding[x] + d*(kernel - 1) + out_padding[x] + 1
+            tmpSize = (newDims[-1] - 1)*stride[x] - 2*in_padding[x] + d*(kernel[x] - 1) + out_padding[x] + 1
             newDims.append(tmpSize)
 #         newDims.pop(0)
         return newDims
@@ -246,19 +248,19 @@ class VAE(nn.Module):
         
     def encoder(self, x):
 
-        x = F.relu(self.encConv1(x))
+        x = F.leaky_relu(self.encConv1(x))
         x = self.encBn1(x)
-        x = F.relu(self.encConv2(x))
+        x = F.leaky_relu(self.encConv2(x))
         x = self.encBn2(x)
-        x = F.relu(self.encConv3(x))
+        x = F.leaky_relu(self.encConv3(x))
         x = self.encBn3(x)
-        x = F.relu(self.encConv4(x))
+        x = F.leaky_relu(self.encConv4(x))
         x = self.encBn4(x)
-        x = F.relu(self.encConv5(x))
+        x = F.leaky_relu(self.encConv5(x))
         x = self.encBn5(x)
-        x = F.relu(self.encConv6(x))
+        x = F.leaky_relu(self.encConv6(x))
         x = self.encBn6(x)
-        x = F.relu(self.encConv7(x))
+        x = F.leaky_relu(self.encConv7(x))
         x = self.encBn7(x)
         self.final_encoder_dim = np.array([x.size(1), x.size(2), x.size(3)])
         flatten = np.prod(self.final_encoder_dim)
@@ -277,20 +279,20 @@ class VAE(nn.Module):
 
     def decoder(self, z):
 
-        x = F.relu(self.decFC1(z))
+        x = F.leaky_relu(self.decFC1(z))
         x = self.decBn1(x)
         x = x.view(-1, self.final_encoder_dim[0], self.final_encoder_dim[1], self.final_encoder_dim[2])
-        x = F.relu(self.decConv1(x))
+        x = F.leaky_relu(self.decConv1(x))
         x = self.decBn2(x)
-        x = F.relu(self.decConv2(x))
+        x = F.leaky_relu(self.decConv2(x))
         x = self.decBn3(x)
-        x = F.relu(self.decConv3(x))
+        x = F.leaky_relu(self.decConv3(x))
         x = self.decBn4(x)
-        x = F.relu(self.decConv4(x))
+        x = F.leaky_relu(self.decConv4(x))
         x = self.decBn5(x)
-        x = F.relu(self.decConv5(x))
+        x = F.leaky_relu(self.decConv5(x))
         x = self.decBn6(x)
-        x = F.relu(self.decConv6(x))
+        x = F.leaky_relu(self.decConv6(x))
         x = self.decBn7(x)
         x = torch.sigmoid(self.decConv7(x))
         return x
