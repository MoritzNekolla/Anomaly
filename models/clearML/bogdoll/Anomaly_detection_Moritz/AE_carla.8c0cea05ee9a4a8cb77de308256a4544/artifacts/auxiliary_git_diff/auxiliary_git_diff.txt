diff --git a/.ipynb_checkpoints/AE_Carla-Copy1-checkpoint.ipynb b/.ipynb_checkpoints/AE_Carla-Copy1-checkpoint.ipynb
index 8725132..e3f783c 100644
--- a/.ipynb_checkpoints/AE_Carla-Copy1-checkpoint.ipynb
+++ b/.ipynb_checkpoints/AE_Carla-Copy1-checkpoint.ipynb
@@ -109,7 +109,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f23cd8610a0>"
+       "<matplotlib.image.AxesImage at 0x7fec1d3ca490>"
       ]
      },
      "execution_count": 5,
@@ -176,7 +176,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f23c9f544c0>"
+       "<matplotlib.image.AxesImage at 0x7fec19ac64c0>"
       ]
      },
      "execution_count": 7,
@@ -238,12 +238,12 @@
     "    def __init__(self, imgChannels=3, imgSize=imgSize, zDim=zDim):\n",
     "        super(VAE, self).__init__()\n",
     "        \n",
-    "        stride=[1,2,2,2,2,2,2]\n",
+    "        stride=[1,2,1,2,2,2,2]\n",
     "        out_stride=[2,2,2,2,2,2,2]\n",
     "#         in_stride=[1,2,2,2,2]\n",
     "#         out_stride=[1,2,2,2,1]\n",
-    "        in_padding=[1,0,0,0,0,0,0]\n",
-    "        in_trans_padding=[0,0,0,0,0,1,0]\n",
+    "        in_padding=[1,0,1,0,0,0,0]\n",
+    "        in_trans_padding=[0,0,0,0,1,1,0]\n",
     "        out_padding=[0,0,0,0,0,1,0]\n",
     "        kernel=[3,3,3,3,3,3,3]\n",
     "#         layers=[128, 128, 128, 256, 256]\n",
@@ -270,7 +270,6 @@
     "        encoderDims = self.calcEncoderDims(len(layers), imgSize, kernel, in_padding, stride)\n",
     "        featureDim = layers[-1] * encoderDims[-1] * encoderDims[-1]\n",
     "        self.encFC1 = nn.Linear(featureDim, zDim)\n",
-    "        self.encFC2 = nn.Linear(featureDim, zDim)\n",
     "\n",
     "        # Initializing the fully-connected layer and 2 convolutional layers for decoder\n",
     "        self.decFC1 = nn.Linear(zDim, featureDim)\n",
@@ -445,22 +444,22 @@
       "512x512x3 (Input Image)\n",
       "512x512x32\n",
       "255x255x32\n",
+      "255x255x32\n",
       "127x127x32\n",
       "63x63x32\n",
       "31x31x32\n",
       "15x15x32\n",
-      "7x7x32\n",
       "Decoder:\n",
-      "7x7x32\n",
       "15x15x32\n",
       "31x31x32\n",
       "63x63x32\n",
       "127x127x32\n",
       "255x255x32\n",
+      "255x255x32\n",
       "510x510x32\n",
       "512x512x3 (Output Image)\n",
       "=============\n",
-      "Trainable params: 1323011\n"
+      "Trainable params: 5665283\n"
      ]
     }
    ],
@@ -489,7 +488,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f23c967d370>"
+       "<matplotlib.image.AxesImage at 0x7fec1924fee0>"
       ]
      },
      "execution_count": 13,
@@ -498,7 +497,7 @@
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -591,6502 +590,18 @@
      "output_type": "stream",
      "text": [
       "Training started!\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 1 | Loss: 118690282291.2 | V_Loss: 117997316096.0 | MAE: 117997316096.0\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 2 | Loss: 117264553984.0 | V_Loss: 116550739148.8 | MAE: 116550739148.8\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 3 | Loss: 115756587008.0 | V_Loss: 115183201484.8 | MAE: 115183201484.8\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 4 | Loss: 114400360448.0 | V_Loss: 113682058444.8 | MAE: 113682058444.8\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 5 | Loss: 112783884697.6 | V_Loss: 112048681369.6 | MAE: 112048681369.6\n",
+      "Epoch 1 | Loss: 121138393907.2 | V_Loss: 120540077670.4 | MAE: 120540077670.4\n",
+      "Epoch 2 | Loss: 119928320819.2 | V_Loss: 119251289292.8 | MAE: 119251289292.8\n",
+      "Epoch 3 | Loss: 118735130214.4 | V_Loss: 118120069529.6 | MAE: 118120069529.6\n",
+      "Epoch 4 | Loss: 117575647641.6 | V_Loss: 117001727180.8 | MAE: 117001727180.8\n",
+      "Epoch 5 | Loss: 116367412019.2 | V_Loss: 115710102323.2 | MAE: 115710102323.2\n",
       "Changed learningrate\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 6 | Loss: 111821780582.4 | V_Loss: 111755099750.4 | MAE: 111755099750.4\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 7 | Loss: 111796343603.2 | V_Loss: 111639076044.8 | MAE: 111639076044.8\n",
-      "Changed learningrate\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 8 | Loss: 111402678272.0 | V_Loss: 111488590643.2 | MAE: 111488590643.2\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 9 | Loss: 111487350784.0 | V_Loss: 111323826176.0 | MAE: 111323826176.0\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 10 | Loss: 111128082432.0 | V_Loss: 111348905164.8 | MAE: 111348905164.8\n"
+      "Epoch 6 | Loss: 115612973465.6 | V_Loss: 115535080652.8 | MAE: 115535080652.8\n",
+      "Epoch 7 | Loss: 115501444300.8 | V_Loss: 115404866764.8 | MAE: 115404866764.8\n",
+      "Changed learningrate\n",
+      "Epoch 8 | Loss: 115308325683.2 | V_Loss: 115282040012.8 | MAE: 115282040012.8\n",
+      "Epoch 9 | Loss: 115227586150.4 | V_Loss: 115193740083.2 | MAE: 115193740083.2\n",
+      "Epoch 10 | Loss: 115088781312.0 | V_Loss: 115085020774.4 | MAE: 115085020774.4\n"
      ]
     }
    ],
@@ -7135,25 +650,7 @@
     "    val_loss /= len(dataloaders[\"test\"].dataset)\n",
     "\n",
     "    print(f\"Epoch {e} | Loss: {train_loss} | V_Loss: {val_loss} | MAE: {val_loss}\")\n",
-    "    \n",
-    "# Encoder:\n",
-    "# 512x512x3 (Input Image)\n",
-    "# 512x512x32\n",
-    "# 255x255x32\n",
-    "# 127x127x32\n",
-    "# 63x63x32\n",
-    "# 31x31x32\n",
-    "# 15x15x32\n",
-    "# 7x7x32\n",
-    "# Decoder:\n",
-    "# 7x7x32\n",
-    "# 9x9x32\n",
-    "# 19x19x32\n",
-    "# 39x39x32\n",
-    "# 79x79x32\n",
-    "# 159x159x32\n",
-    "# 319x319x32\n",
-    "# 639x639x3 (Output Image)\n"
+    "    \n"
    ]
   },
   {
@@ -7178,7 +675,7 @@
        "  (encBn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (encConv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (encBn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "  (encConv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encConv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
        "  (encBn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (encConv4): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (encBn4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
@@ -7188,10 +685,10 @@
        "  (encBn6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (encConv7): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (encBn7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "  (encFC1): Linear(in_features=1568, out_features=256, bias=True)\n",
-       "  (encFC2): Linear(in_features=1568, out_features=256, bias=True)\n",
-       "  (decFC1): Linear(in_features=256, out_features=1568, bias=True)\n",
-       "  (decBn1): BatchNorm1d(1568, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encFC1): Linear(in_features=7200, out_features=256, bias=True)\n",
+       "  (encFC2): Linear(in_features=7200, out_features=256, bias=True)\n",
+       "  (decFC1): Linear(in_features=256, out_features=7200, bias=True)\n",
+       "  (decBn1): BatchNorm1d(7200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (decConv1): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (decBn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (decConv2): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
@@ -7200,7 +697,7 @@
        "  (decBn4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (decConv4): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (decBn5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "  (decConv5): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decConv5): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
        "  (decBn6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (decConv6): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))\n",
        "  (decBn7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
diff --git a/.ipynb_checkpoints/AE_Carla-checkpoint.ipynb b/.ipynb_checkpoints/AE_Carla-checkpoint.ipynb
index d008080..e3b5734 100644
--- a/.ipynb_checkpoints/AE_Carla-checkpoint.ipynb
+++ b/.ipynb_checkpoints/AE_Carla-checkpoint.ipynb
@@ -52,13 +52,13 @@
     "PATH = \"models/\" + MODEL_NAME\n",
     "# IMG_TRAIN = \"/disk/vanishing_data/is789/anomaly_samples/train_set/\"\n",
     "# IMG_TEST = \"/disk/vanishing_data/is789/anomaly_samples/40test/\"\n",
-    "# TRAIN_ID = \"7c89dda94374478a8937be5916177f70\"\n",
+    "TRAIN_ID = \"7c89dda94374478a8937be5916177f70\"\n",
     "TEST_ID = \"8ce5cdd31e8e499db2e07fc70b6136d5\"\n",
-    "TRAIN_ID = \"8ce5cdd31e8e499db2e07fc70b6136d5\"\n",
+    "# TRAIN_ID = \"8ce5cdd31e8e499db2e07fc70b6136d5\"\n",
     "\n",
     "\n",
     "### ClearML section\n",
-    "task = Task.init(project_name=\"bogdoll/Anomaly_detection_Moritz\", task_name=\"VAE_carla\", output_uri=PATH)\n",
+    "task = Task.init(project_name=\"bogdoll/Anomaly_detection_Moritz\", task_name=\"AE_carla\", output_uri=PATH)\n",
     "task.set_base_docker(\n",
     "            \"nvcr.io/nvidia/pytorch:21.10-py3\",\n",
     "            docker_setup_bash_script=\"apt-get update && apt-get install -y python3-opencv\",\n",
@@ -78,7 +78,7 @@
     "\n",
     "parameters = {\n",
     "    \"epoch\" : 8000,\n",
-    "    \"batch_size\" : 2,\n",
+    "    \"batch_size\" : 16,\n",
     "    \"imgSize\": 512,\n",
     "    \"zDim\": 1024,\n",
     "    \"learning_rate\" : 1e-05,\n",
@@ -206,12 +206,12 @@
     "    def __init__(self, imgChannels=3, imgSize=parameters[\"imgSize\"], zDim=parameters[\"zDim\"]):\n",
     "        super(VAE, self).__init__()\n",
     "        \n",
-    "        stride=[1,2,2,2,2,2,2]\n",
+    "        stride=[1,2,1,2,2,2,2]\n",
     "        out_stride=[2,2,2,2,2,2,2]\n",
     "#         in_stride=[1,2,2,2,2]\n",
     "#         out_stride=[1,2,2,2,1]\n",
-    "        in_padding=[1,0,0,0,0,0,0]\n",
-    "        in_trans_padding=[0,0,0,0,0,1,0]\n",
+    "        in_padding=[1,0,1,0,0,0,0]\n",
+    "        in_trans_padding=[0,0,0,0,1,1,0]\n",
     "        out_padding=[0,0,0,0,0,1,0]\n",
     "        kernel=[3,3,3,3,3,3,3]\n",
     "#         layers=[128, 128, 128, 256, 256]\n",
@@ -653,7 +653,7 @@
     "        img = np.transpose(img, (2,1,0))\n",
     "#         plt.imshow(img, cmap=\"gray\")\n",
     "        \n",
-    "        out, mu, logVAR = model(imgs)\n",
+    "        out = model(imgs)\n",
     "#         plt.subplot(122)\n",
     "        out = out[0].cpu().numpy()\n",
     "        out = np.transpose(out, (2,1,0))\n",
@@ -682,7 +682,7 @@
     "        img = imgs[0].cpu().numpy()\n",
     "        img = np.transpose(img, (2,1,0))\n",
     "\n",
-    "        out, mu, logVAR = model(imgs)\n",
+    "        out = model(imgs)\n",
     "    #         outimg = np.transpose(out[0].cpu().numpy(), [1,2,0])\n",
     "        out = out[0].cpu().numpy()\n",
     "        out = np.transpose(out, (2,1,0))\n",
diff --git a/AE_Carla-Copy1.ipynb b/AE_Carla-Copy1.ipynb
index 8725132..e3f783c 100644
--- a/AE_Carla-Copy1.ipynb
+++ b/AE_Carla-Copy1.ipynb
@@ -109,7 +109,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f23cd8610a0>"
+       "<matplotlib.image.AxesImage at 0x7fec1d3ca490>"
       ]
      },
      "execution_count": 5,
@@ -176,7 +176,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f23c9f544c0>"
+       "<matplotlib.image.AxesImage at 0x7fec19ac64c0>"
       ]
      },
      "execution_count": 7,
@@ -238,12 +238,12 @@
     "    def __init__(self, imgChannels=3, imgSize=imgSize, zDim=zDim):\n",
     "        super(VAE, self).__init__()\n",
     "        \n",
-    "        stride=[1,2,2,2,2,2,2]\n",
+    "        stride=[1,2,1,2,2,2,2]\n",
     "        out_stride=[2,2,2,2,2,2,2]\n",
     "#         in_stride=[1,2,2,2,2]\n",
     "#         out_stride=[1,2,2,2,1]\n",
-    "        in_padding=[1,0,0,0,0,0,0]\n",
-    "        in_trans_padding=[0,0,0,0,0,1,0]\n",
+    "        in_padding=[1,0,1,0,0,0,0]\n",
+    "        in_trans_padding=[0,0,0,0,1,1,0]\n",
     "        out_padding=[0,0,0,0,0,1,0]\n",
     "        kernel=[3,3,3,3,3,3,3]\n",
     "#         layers=[128, 128, 128, 256, 256]\n",
@@ -270,7 +270,6 @@
     "        encoderDims = self.calcEncoderDims(len(layers), imgSize, kernel, in_padding, stride)\n",
     "        featureDim = layers[-1] * encoderDims[-1] * encoderDims[-1]\n",
     "        self.encFC1 = nn.Linear(featureDim, zDim)\n",
-    "        self.encFC2 = nn.Linear(featureDim, zDim)\n",
     "\n",
     "        # Initializing the fully-connected layer and 2 convolutional layers for decoder\n",
     "        self.decFC1 = nn.Linear(zDim, featureDim)\n",
@@ -445,22 +444,22 @@
       "512x512x3 (Input Image)\n",
       "512x512x32\n",
       "255x255x32\n",
+      "255x255x32\n",
       "127x127x32\n",
       "63x63x32\n",
       "31x31x32\n",
       "15x15x32\n",
-      "7x7x32\n",
       "Decoder:\n",
-      "7x7x32\n",
       "15x15x32\n",
       "31x31x32\n",
       "63x63x32\n",
       "127x127x32\n",
       "255x255x32\n",
+      "255x255x32\n",
       "510x510x32\n",
       "512x512x3 (Output Image)\n",
       "=============\n",
-      "Trainable params: 1323011\n"
+      "Trainable params: 5665283\n"
      ]
     }
    ],
@@ -489,7 +488,7 @@
     {
      "data": {
       "text/plain": [
-       "<matplotlib.image.AxesImage at 0x7f23c967d370>"
+       "<matplotlib.image.AxesImage at 0x7fec1924fee0>"
       ]
      },
      "execution_count": 13,
@@ -498,7 +497,7 @@
     },
     {
      "data": {
-      "image/png": "\n",
+      "image/png": "\n",
       "text/plain": [
        "<Figure size 432x288 with 1 Axes>"
       ]
@@ -591,6502 +590,18 @@
      "output_type": "stream",
      "text": [
       "Training started!\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 1 | Loss: 118690282291.2 | V_Loss: 117997316096.0 | MAE: 117997316096.0\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 2 | Loss: 117264553984.0 | V_Loss: 116550739148.8 | MAE: 116550739148.8\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 3 | Loss: 115756587008.0 | V_Loss: 115183201484.8 | MAE: 115183201484.8\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 4 | Loss: 114400360448.0 | V_Loss: 113682058444.8 | MAE: 113682058444.8\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 5 | Loss: 112783884697.6 | V_Loss: 112048681369.6 | MAE: 112048681369.6\n",
+      "Epoch 1 | Loss: 121138393907.2 | V_Loss: 120540077670.4 | MAE: 120540077670.4\n",
+      "Epoch 2 | Loss: 119928320819.2 | V_Loss: 119251289292.8 | MAE: 119251289292.8\n",
+      "Epoch 3 | Loss: 118735130214.4 | V_Loss: 118120069529.6 | MAE: 118120069529.6\n",
+      "Epoch 4 | Loss: 117575647641.6 | V_Loss: 117001727180.8 | MAE: 117001727180.8\n",
+      "Epoch 5 | Loss: 116367412019.2 | V_Loss: 115710102323.2 | MAE: 115710102323.2\n",
       "Changed learningrate\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 6 | Loss: 111821780582.4 | V_Loss: 111755099750.4 | MAE: 111755099750.4\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 7 | Loss: 111796343603.2 | V_Loss: 111639076044.8 | MAE: 111639076044.8\n",
-      "Changed learningrate\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 8 | Loss: 111402678272.0 | V_Loss: 111488590643.2 | MAE: 111488590643.2\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 9 | Loss: 111487350784.0 | V_Loss: 111323826176.0 | MAE: 111323826176.0\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n"
-     ]
-    },
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "torch.Size([2, 32, 512, 512])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "----\n",
-      "torch.Size([2, 32, 7, 7])\n",
-      "torch.Size([2, 32, 15, 15])\n",
-      "torch.Size([2, 32, 31, 31])\n",
-      "torch.Size([2, 32, 63, 63])\n",
-      "torch.Size([2, 32, 127, 127])\n",
-      "torch.Size([2, 32, 255, 255])\n",
-      "torch.Size([2, 32, 510, 510])\n",
-      "torch.Size([2, 3, 512, 512])\n",
-      "Epoch 10 | Loss: 111128082432.0 | V_Loss: 111348905164.8 | MAE: 111348905164.8\n"
+      "Epoch 6 | Loss: 115612973465.6 | V_Loss: 115535080652.8 | MAE: 115535080652.8\n",
+      "Epoch 7 | Loss: 115501444300.8 | V_Loss: 115404866764.8 | MAE: 115404866764.8\n",
+      "Changed learningrate\n",
+      "Epoch 8 | Loss: 115308325683.2 | V_Loss: 115282040012.8 | MAE: 115282040012.8\n",
+      "Epoch 9 | Loss: 115227586150.4 | V_Loss: 115193740083.2 | MAE: 115193740083.2\n",
+      "Epoch 10 | Loss: 115088781312.0 | V_Loss: 115085020774.4 | MAE: 115085020774.4\n"
      ]
     }
    ],
@@ -7135,25 +650,7 @@
     "    val_loss /= len(dataloaders[\"test\"].dataset)\n",
     "\n",
     "    print(f\"Epoch {e} | Loss: {train_loss} | V_Loss: {val_loss} | MAE: {val_loss}\")\n",
-    "    \n",
-    "# Encoder:\n",
-    "# 512x512x3 (Input Image)\n",
-    "# 512x512x32\n",
-    "# 255x255x32\n",
-    "# 127x127x32\n",
-    "# 63x63x32\n",
-    "# 31x31x32\n",
-    "# 15x15x32\n",
-    "# 7x7x32\n",
-    "# Decoder:\n",
-    "# 7x7x32\n",
-    "# 9x9x32\n",
-    "# 19x19x32\n",
-    "# 39x39x32\n",
-    "# 79x79x32\n",
-    "# 159x159x32\n",
-    "# 319x319x32\n",
-    "# 639x639x3 (Output Image)\n"
+    "    \n"
    ]
   },
   {
@@ -7178,7 +675,7 @@
        "  (encBn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (encConv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (encBn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "  (encConv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (encConv3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
        "  (encBn3): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (encConv4): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (encBn4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
@@ -7188,10 +685,10 @@
        "  (encBn6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (encConv7): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (encBn7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "  (encFC1): Linear(in_features=1568, out_features=256, bias=True)\n",
-       "  (encFC2): Linear(in_features=1568, out_features=256, bias=True)\n",
-       "  (decFC1): Linear(in_features=256, out_features=1568, bias=True)\n",
-       "  (decBn1): BatchNorm1d(1568, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
+       "  (encFC1): Linear(in_features=7200, out_features=256, bias=True)\n",
+       "  (encFC2): Linear(in_features=7200, out_features=256, bias=True)\n",
+       "  (decFC1): Linear(in_features=256, out_features=7200, bias=True)\n",
+       "  (decBn1): BatchNorm1d(7200, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (decConv1): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (decBn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (decConv2): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
@@ -7200,7 +697,7 @@
        "  (decBn4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (decConv4): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
        "  (decBn5): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
-       "  (decConv5): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2))\n",
+       "  (decConv5): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n",
        "  (decBn6): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
        "  (decConv6): ConvTranspose2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), output_padding=(1, 1))\n",
        "  (decBn7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
diff --git a/AE_Carla.ipynb b/AE_Carla.ipynb
index d008080..e3b5734 100644
--- a/AE_Carla.ipynb
+++ b/AE_Carla.ipynb
@@ -52,13 +52,13 @@
     "PATH = \"models/\" + MODEL_NAME\n",
     "# IMG_TRAIN = \"/disk/vanishing_data/is789/anomaly_samples/train_set/\"\n",
     "# IMG_TEST = \"/disk/vanishing_data/is789/anomaly_samples/40test/\"\n",
-    "# TRAIN_ID = \"7c89dda94374478a8937be5916177f70\"\n",
+    "TRAIN_ID = \"7c89dda94374478a8937be5916177f70\"\n",
     "TEST_ID = \"8ce5cdd31e8e499db2e07fc70b6136d5\"\n",
-    "TRAIN_ID = \"8ce5cdd31e8e499db2e07fc70b6136d5\"\n",
+    "# TRAIN_ID = \"8ce5cdd31e8e499db2e07fc70b6136d5\"\n",
     "\n",
     "\n",
     "### ClearML section\n",
-    "task = Task.init(project_name=\"bogdoll/Anomaly_detection_Moritz\", task_name=\"VAE_carla\", output_uri=PATH)\n",
+    "task = Task.init(project_name=\"bogdoll/Anomaly_detection_Moritz\", task_name=\"AE_carla\", output_uri=PATH)\n",
     "task.set_base_docker(\n",
     "            \"nvcr.io/nvidia/pytorch:21.10-py3\",\n",
     "            docker_setup_bash_script=\"apt-get update && apt-get install -y python3-opencv\",\n",
@@ -78,7 +78,7 @@
     "\n",
     "parameters = {\n",
     "    \"epoch\" : 8000,\n",
-    "    \"batch_size\" : 2,\n",
+    "    \"batch_size\" : 16,\n",
     "    \"imgSize\": 512,\n",
     "    \"zDim\": 1024,\n",
     "    \"learning_rate\" : 1e-05,\n",
@@ -206,12 +206,12 @@
     "    def __init__(self, imgChannels=3, imgSize=parameters[\"imgSize\"], zDim=parameters[\"zDim\"]):\n",
     "        super(VAE, self).__init__()\n",
     "        \n",
-    "        stride=[1,2,2,2,2,2,2]\n",
+    "        stride=[1,2,1,2,2,2,2]\n",
     "        out_stride=[2,2,2,2,2,2,2]\n",
     "#         in_stride=[1,2,2,2,2]\n",
     "#         out_stride=[1,2,2,2,1]\n",
-    "        in_padding=[1,0,0,0,0,0,0]\n",
-    "        in_trans_padding=[0,0,0,0,0,1,0]\n",
+    "        in_padding=[1,0,1,0,0,0,0]\n",
+    "        in_trans_padding=[0,0,0,0,1,1,0]\n",
     "        out_padding=[0,0,0,0,0,1,0]\n",
     "        kernel=[3,3,3,3,3,3,3]\n",
     "#         layers=[128, 128, 128, 256, 256]\n",
@@ -653,7 +653,7 @@
     "        img = np.transpose(img, (2,1,0))\n",
     "#         plt.imshow(img, cmap=\"gray\")\n",
     "        \n",
-    "        out, mu, logVAR = model(imgs)\n",
+    "        out = model(imgs)\n",
     "#         plt.subplot(122)\n",
     "        out = out[0].cpu().numpy()\n",
     "        out = np.transpose(out, (2,1,0))\n",
@@ -682,7 +682,7 @@
     "        img = imgs[0].cpu().numpy()\n",
     "        img = np.transpose(img, (2,1,0))\n",
     "\n",
-    "        out, mu, logVAR = model(imgs)\n",
+    "        out = model(imgs)\n",
     "    #         outimg = np.transpose(out[0].cpu().numpy(), [1,2,0])\n",
     "        out = out[0].cpu().numpy()\n",
     "        out = np.transpose(out, (2,1,0))\n",
diff --git a/AE_Carla.py b/AE_Carla.py
index 26c4cb9..51ded7b 100644
--- a/AE_Carla.py
+++ b/AE_Carla.py
@@ -30,13 +30,13 @@ MODEL_NAME = "clearML"
 PATH = "models/" + MODEL_NAME
 # IMG_TRAIN = "/disk/vanishing_data/is789/anomaly_samples/train_set/"
 # IMG_TEST = "/disk/vanishing_data/is789/anomaly_samples/40test/"
-# TRAIN_ID = "7c89dda94374478a8937be5916177f70"
+TRAIN_ID = "7c89dda94374478a8937be5916177f70"
 TEST_ID = "8ce5cdd31e8e499db2e07fc70b6136d5"
-TRAIN_ID = "8ce5cdd31e8e499db2e07fc70b6136d5"
+# TRAIN_ID = "8ce5cdd31e8e499db2e07fc70b6136d5"
 
 
 ### ClearML section
-task = Task.init(project_name="bogdoll/Anomaly_detection_Moritz", task_name="VAE_carla", output_uri=PATH)
+task = Task.init(project_name="bogdoll/Anomaly_detection_Moritz", task_name="AE_carla", output_uri=PATH)
 task.set_base_docker(
             "nvcr.io/nvidia/pytorch:21.10-py3",
             docker_setup_bash_script="apt-get update && apt-get install -y python3-opencv",
@@ -56,7 +56,7 @@ task.execute_remotely('docker', clone=False, exit_process=True)
 
 parameters = {
     "epoch" : 8000,
-    "batch_size" : 2,
+    "batch_size" : 16,
     "imgSize": 512,
     "zDim": 1024,
     "learning_rate" : 1e-05,
@@ -156,12 +156,12 @@ class VAE(nn.Module):
     def __init__(self, imgChannels=3, imgSize=parameters["imgSize"], zDim=parameters["zDim"]):
         super(VAE, self).__init__()
         
-        stride=[1,2,2,2,2,2,2]
+        stride=[1,2,1,2,2,2,2]
         out_stride=[2,2,2,2,2,2,2]
 #         in_stride=[1,2,2,2,2]
 #         out_stride=[1,2,2,2,1]
-        in_padding=[1,0,0,0,0,0,0]
-        in_trans_padding=[0,0,0,0,0,1,0]
+        in_padding=[1,0,1,0,0,0,0]
+        in_trans_padding=[0,0,0,0,1,1,0]
         out_padding=[0,0,0,0,0,1,0]
         kernel=[3,3,3,3,3,3,3]
 #         layers=[128, 128, 128, 256, 256]
@@ -545,7 +545,7 @@ with torch.no_grad():
         img = np.transpose(img, (2,1,0))
 #         plt.imshow(img, cmap="gray")
         
-        out, mu, logVAR = model(imgs)
+        out = model(imgs)
 #         plt.subplot(122)
         out = out[0].cpu().numpy()
         out = np.transpose(out, (2,1,0))
@@ -570,7 +570,7 @@ def make_prediction(dataSet, index):
         img = imgs[0].cpu().numpy()
         img = np.transpose(img, (2,1,0))
 
-        out, mu, logVAR = model(imgs)
+        out = model(imgs)
     #         outimg = np.transpose(out[0].cpu().numpy(), [1,2,0])
         out = out[0].cpu().numpy()
         out = np.transpose(out, (2,1,0))
diff --git a/VAE_Carla-Copy1.ipynb b/VAE_Carla-Copy1.ipynb
index 77e06f2..d3ca815 100644
--- a/VAE_Carla-Copy1.ipynb
+++ b/VAE_Carla-Copy1.ipynb
@@ -28,6 +28,7 @@
     "IMG_TEST = \"/disk/vanishing_data/is789/anomaly_samples/40test/\"\n",
     "TRAIN_ID = \"7c89dda94374478a8937be5916177f70\"\n",
     "TEST_ID = \"8ce5cdd31e8e499db2e07fc70b6136d5\"\n",
+    "\n",
     "###lr anpassen auch die early stops\n",
     "epoch = 10\n",
     "BATCH_SIZE = 2\n",
